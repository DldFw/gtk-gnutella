autogen definitions 'props.tpl';

/*
 * $Id$
 */
property_set = "gui_property";
func_prefix = "gui_prop";
offset = 1000;

uses = "gui.h";

prop = {
    name = "monitor_enabled";
    desc = "Search monitor enabled";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "monitor_max_items";
    desc = "Maximum number of queries visible in search monitor";
    type = guint32;
    data = {
        default = 25;
        min     = 0;
        max     = 100;
    };
};

prop = {
    name = "queue_regex_case";
    desc = "Match queue selection by regexp case sensitive";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "search_autoselect";
    desc = "Autoselect similar files in searches";
    type = boolean;
    data = {
        default = TRUE;
    };
};
    
prop = {
    name = "search_hide_downloaded";
    desc = "Whether to hide hits that have been considered "
		"for auto-downloading based on the SHA1 or your filters.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "nodes_col_widths";
    cfgvar = "widths_nodes";
    desc = "Widths of the columns in the nodes table";
    type = guint32;
    vector_size = 7;
    data = {
        default = "{ 130, 50, 120, 20, 30, 30, 80 }";
    };
};

prop = {
    name = "dl_active_col_widths";
    cfgvar = "widths_dl_active";
    desc = "Widths of the columns in the active downloads table";
    type = guint32;
    vector_size = 6;
    data = {
        default = "{ 240, 80, 80, 80, 80, 80 }";
    };
};

prop = {
    name = "dl_queued_col_widths";
    cfgvar = "widths_dl_queued";
    desc = "Widths of the columns in the queued downloads table";
    type = guint32;
    vector_size = 5;
    data = {
        default = "{ 240, 80, 80, 80, 80 }";
    };
};

prop = {
    name = "file_info_col_widths";
    cfgvar = "widths_file_info";
    desc = "Widths of the columns in the file info table";
    type = guint32;
    vector_size = 5;
    data = {
        default = "{ 240, 80, 80, 80, 80 }";
    };
};
    
prop = {
    name = "search_results_col_visible";
    desc = "Which columns are visible in the search results tables";
    type = guint32;
    vector_size = 6;
    data = {
        default = "{ 1,1,1,1,0,1}";
    };
};

prop = {
    name = "search_list_col_widths";
    cfgvar = "widths_search_list";
    desc = "Widths of the columns in the search list on the sidebar";
    type = guint32;
    vector_size = 3;
    data = {
        default = "{ 80, 20, 20 }";
    };
};

prop = {
    name ="search_results_col_widths";
    cfgvar = "widths_search_results";
    desc = "Widths of the columns in the search results tables";
    type = guint32;
    vector_size = 7;
    data = {
        default = "{ 210, 80, 50, 70, 70, 140, 70 }";
    };
};

prop = {
    name = "search_stats_col_widths";
    cfgvar = "widths_search_stats";
    desc = "Widths of the columns in the search stats table";
    type = guint32;
    vector_size = 3;
    data = {
        default = "{ 200, 80, 80 }";
    };
};

prop = {
    name = "ul_stats_col_widths";
    cfgvar = "widths_ul_stats";
    desc = "Widths of the columns in the upload stats table";
    type = guint32;
    vector_size = 5;
    data = {
        default = "{ 200, 80, 80, 80, 80 }";
    };
};

prop = {
    name = "uploads_col_widths";
    cfgvar = "widths_uploads";
    desc = "Widths of the columns in the uploads table";
    type = guint32;
    vector_size = 6;
    data = {
        default = "{ 200, 120, 36, 80, 80, 80 }";
    };
};

prop = {
    name = "filter_rules_col_widths";
    cfgvar = "widths_filter_table";
    desc = "Widths of the columns in the rules table in the filter dialog";
    type = guint32;
    vector_size = 4;
    data = {
        default = "{ 10, 240, 80, 40 }";
    };
};

prop = {
    name = "filter_filters_col_widths";
    cfgvar = "widths_filter_filters";
    desc = "Widths of the columns in the filter table in the filter dialog";
    type = guint32;
    vector_size = 3;
    data = {
        default = "{ 80, 40, 20 }";
    };
};

prop = {
    name = "gnet_stats_msg_col_widths";
    cfgvar = "widths_gnet_stats_msg";
    desc = "Widths of the columns in the gnet packet stats table";
    type = guint32;
    vector_size = 6;
    data = {
        default = "{ 60, 20, 20, 20, 20, 20 }";
    };
};

prop = {
    name = "gnet_stats_fc_ttl_col_widths";
    cfgvar = "widths_gnet_stats_fc_ttl";
    desc = "Widths of the columns in the gnet fc ttl stats table";
    type = guint32;
    vector_size = 10;
    data = {
        default = "{ 60, 20, 20, 20, 20, 20, 20, 20, 20, 20 }";
    };
};

prop = {
    name = "gnet_stats_fc_hops_col_widths";
    cfgvar = "widths_gnet_stats_fc_hops";
    desc = "Widths of the columns in the gnet fc hops stats table";
    type = guint32;
    vector_size = 10;
    data = {
        default = "{ 60, 20, 20, 20, 20, 20, 20, 20, 20, 20 }";
    };
};

prop = {
    name = "gnet_stats_fc_col_widths";
    cfgvar = "widths_gnet_stats_fc";
    desc = "Widths of the columns in the gnet fc hops stats table";
    type = guint32;
    vector_size = 10;
    data = {
        default = "{ 60, 20, 20, 20, 20, 20, 20, 20, 20, 20 }";
    };
};

prop = {
    name = "gnet_stats_drop_reasons_col_widths";
    cfgvar = "widths_gnet_stats_drop_reasons";
    desc = "Widths of the columns in the gnet stats drop reasons table";
    type = guint32;
    vector_size = 2;
    data = {
        default = "{ 60, 20 }";
    };
};

prop = {
    name = "gnet_stats_recv_col_widths"; 
    cfgvar = "widths_gnet_stats_recv";
    desc = "Widths of the columns in the gnet stats drop reasons table";
    type = guint32;
    vector_size = 10;
    data = {
        default = "{ 60, 40, 40, 40, 40, 40, 40, 40, 40, 40 }";
    };
};

prop = {
    name = "window_coords";
    desc = "Position and size of the main window";
    type = guint32;
    vector_size = 4;
    data = {
        default = "{ 0, 0, 0, 0 }";
    };
};

prop = {
    name = "filter_dlg_coords";
    desc = "Position and size of the filter dialog";
    type = guint32;
    vector_size = 4;
    data = {
        default = "{ 0, 0, 0, 0 }";
    };
};


prop = {
    name = "downloads_divider_pos";
    desc = "Position of the divider in the downloads panel";
    type = guint32;
    data = {
        default = 220;
        min     = 0x0000;
        max     = 0xFFFF;
    };
};

prop = {
    name = "fileinfo_divider_pos";
    desc = "Position of the divider in the fileinfo panel";
    type = guint32;
    data = {
        default = 305;
        min     = 0x0000;
        max     = 0xFFFF;
    };
};

prop = {
    name = "main_divider_pos";
    desc = "Size of the sidebar";
    type = guint32;
    data = {
        default = 140;
        min     = 0x0000;
        max     = 0xFFFF;
    };
};

prop = {
    name = "gnet_stats_divider_pos";
    desc = "Position of the divider in the gnet stats pane";
    type = guint32;
    data = {
        default = 300;
        min     = 0x0000;
        max     = 0xFFFF;
    };
};

prop = {
    name = "side_divider_pos";
    desc = "Size of the menu in the sidebar";
    type = guint32;
    data = {
        default = 100;
        min     = 0x0000;
        max     = 0xFFFF;
    };
};

prop = {
    name = "results_divider_pos";
    desc = "Position of the divider in the search results pane";
    type = guint32;
    data = {
        default = 400;
        min     = 0x0000;
        max     = 0xFFFF;
    };
};

prop = {
    name = "search_max_results";
    desc = "Maximum number of results to show in any search";
    type = guint32;
    data = {
        default = 5000;
        min     = 10;
        max     = 100000;
    };
};

prop = {
    name = "gui_debug";
    desc = "Debug level for the gui";
    type = guint32;
    data = {
        default = 0;
        min     = 0;
        max     = 20;
    };
};

prop = {
    name = "filter_main_divider_pos";
    desc = "Size of the filter tree in the filter dialog";
    type = guint32;
    data = {
        default = 140;
        min     = 0x0000;
        max     = 0xFFFF;
    };
};

prop = {
    name = "search_results_show_tabs";
    desc = "Show tabs or search list";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "toolbar_visible";
    desc = "Display toolbar";
    type = boolean;
    data = {
        default     = FALSE;
    };
};

prop = {
    name = "statusbar_visible";
    desc = "Display statusbar";
    type = boolean;  
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_uploads_visible";
    desc = "Display upload statistics in sidebar";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_downloads_visible";
    desc = "Display download statistics in sidebar";
    type = boolean;  
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_connections_visible";
    desc = "Display connection statistics in sidebar";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_in_visible";
    desc = "Display incoming HTTP traffic bandwidth usage";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_out_visible";
    desc = "Display outgoing HTTP traffic bandwidth usage";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_gin_visible";
    desc = "Display incoming gNet traffic bandwidth usage";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_gout_visible";
    desc = "Display outgoing gNet traffic bandwidth usage";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_glin_visible";
    desc = "Display incoming gNet leaf traffic bandwidth usage";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_glout_visible";
    desc = "Display outgoing gNet leaf traffic bandwidth usage";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "autohide_bws_gleaf";
    desc = "Automatically hide leaf bandwidth display when not in "
           "ultrapeer mode";
    type = boolean;
    data = {
        default = TRUE;
    };
};


prop = {
    name = "progressbar_bws_in_avg";
    desc = "Display incoming HTTP traffic bandwidth average";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_out_avg";
    desc = "Display outgoing HTTP traffic bandwidth average";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_gin_avg";
    desc = "Display incoming gNet traffic bandwidth average";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_gout_avg";
    desc = "Display outgoing gNet traffic bandwidth average";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_glin_avg";
    desc = "Display incoming gNet leaf traffic bandwidth average";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_glout_avg";
    desc = "Display outgoing gNet leaf traffic bandwidth average";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "search_autoselect_ident";
    desc = "When enabled autoselection only takes place if filesize "
           "matches exactly, otherwise it must be equal or greater";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "jump_to_downloads";
    desc = "Jump to downloads screen when downloading a file";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_search_results_settings";
    desc = "Display search settings";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_dl_settings";
    desc = "Display download settings";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "search_autoselect_fuzzy";
    desc = "Use fuzzy name match for autoselection";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "search_stats_mode";
    desc = "Collect statistics about searches that go through this node";
    type = multichoice;
    data = {
        default = 0;
    };
    choice = {
        name = "disable";
        value = 0;
    };
    choice = {
        name = "by words";
        value = 1;
    };
    choice = {
        name = "by whole query";
        value = 2;
    };
    choice = {
        name = "by router";
        value = 3;
    };
};

prop = {
    name = "search_stats_update_interval";
    desc = "Interval in which the search stats are updated";
    type = guint32;
    data = {
        default = 200;
        min     = 0;
        max     = 50000;
    };
};

prop = {
    name = "search_stats_delcoef";
    desc =	"A deletion coefficient, so that small non-significant results "
			"can be dropped.  The lower it is, the more search statistics "
			"will be kept in memory.";
    type = guint32;
    data = {
        default = 25;
        min     = 0;
        max     = 100;
    };
};

prop = {
    name = "confirm_quit";
    desc = "Show confirmation dialog when leaving gtk-gnutella";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "show_tooltips";
    desc = "Show a helpful message when the mouse pointer lingers "
           "over a widget";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "expert_mode";
    desc = "Show a lot more settings to tweak. If you tamper with them be "
           "sure to read up on what they are doing";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "gnet_stats_perc";
    desc = "Show percentages instead of absolute values in the gnet stats";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "gnet_stats_bytes";
    desc = "Show bytes instead of packets in the gnet stats";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "gnet_stats_hops";
    desc = "Show stats per hops instead of per TTL";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "gnet_stats_with_headers";
    desc = "Add the headers to the volume";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "gnet_stats_drop_perc";
    desc = "Show percentages instead of absolute values in the gnet stats "
           "(drop reasons)";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "gnet_stats_general_col_widths";
    cfgvar = "widths_gnet_stats_general";
    desc = "Widths of the columns in the gnet stats general table";
    type = guint32;
    vector_size = 2;
    data = {
        default = "{ 60, 20 }";
    };
};

prop = {
    name = "autoclear_completed_uploads";
    cfgvar = "auto_clear_completed_uploads";
    desc = "Auto clear completed uploads";
    type = boolean;
    data = {
        default = TRUE;
        value   = clear_uploads_complete;
    };
};

prop = {
    name = "autoclear_failed_uploads";
    cfgvar = "auto_clear_failed_uploads";
    desc = "Auto clear failed uploads";
    type = boolean;
    data = {
        default = TRUE;
        value   = clear_uploads_failed;
    };
};

prop = {
    name = "node_show_uptime";
    desc = "Whether the node's uptime should be shown (not all nodes provide "
		"this information).";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "node_show_handshake_version";
    desc = "Whether the handshaking version number should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "node_show_detailed_info";
    desc = "Whether detailed traffic information should be shown for "
		"the node.  When enabled, it is possible to also customize "
		"how much information to display.  When disabled, only TX and RX "
		"message counts are displayed, followed by the message queue info.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_txc";
    desc = "Whether TX traffic compression ratio should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_rxc";
    desc = "Whether RX traffic compression ratio should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_tx_speed";
    desc = "Whether TX instantaneous transmission speed should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_rx_speed";
    desc = "Whether RX instantaneous transmission speed should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_tx_queries";
    desc = "Whether count of transmitted queries should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_rx_queries";
    desc = "Whether count of received queries should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_tx_hits";
    desc = "Whether count of transmitted query hits should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_rx_hits";
    desc = "Whether count of received query hits should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_gen_queries";
    desc = "Whether count of locally generated queries should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_sq_queries";
    desc = "Whether count of local queries pending transmission should "
		"be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_tx_dropped";
    desc = "Whether count of dropped messages on TX should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_rx_dropped";
    desc = "Whether count of dropped messages on RX should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_qrp_stats";
    desc = "Whether Query Routing Protocol statistics should be displayed. "
		"For a leaf node, this is simply the ratio of queries that generated "
		"a hit over the amount of received queries.  For an ultrapeer, it "
		"displays the amount of slots in the QRP table, 'g' the generation "
		"number, 'f' the fill ratio, 't' the passing threshold and 'e' the "
		"efficiency, i.e. the proportion of received queries that are sent "
		"to the leaf.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_dbw";
    desc = "Whether duplicate, bad and weird received message counts should "
		"be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_rt";
    desc = "Whether ping/pong roundtrip times (average and last) should be "
		"displayed.  Values shown are in milliseconds.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_shared_size";
    desc = "Whether we should display the size of the node's library, when "
		"it is known to us.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_shared_files";
    desc = "Whether we should display the amount of files shared by nodes, "
		"when that is known to us.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "search_accumulation_period";
    desc = "The amount of time in seconds that the GUI should buffer "
		"search results as they come in.  This prevents too frequent "
		"updates that may cause flickering, but also saves CPU cycles "
		"since less redrawing has to occur in the search pane.";
    type = guint32;
    data = {
        default = 5;
		min = 1;
		max = 30;
    };
};

/*
 * GTK2 specific properties
 */

prop = {
    name = "treemenu_nodes_expanded";
    desc = "Expanded stati of the nodes in the treemenu";
    type = guint32;
    vector_size = 16; /* TREEMENU_NODES */
    data = {
        default = "{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 }";
    };
};

prop = {
    name = "gnet_stats_pkg_col_widths";
    cfgvar = "widths_gnet_stats_pkg";
    desc = "Widths of the columns in the gnet packet stats table (pkg)"
           "[GTK2]";
    type = guint32;
    vector_size = 6;
    data = {
        default = "{ 60, 20, 20, 20, 20, 20 }";
    };
};

prop = {
    name = "gnet_stats_byte_col_widths";
    cfgvar = "widths_gnet_stats_byte";
    desc = "Widths of the columns in the gnet packet stats table (byte) [GTK2]";
    type = guint32;
    vector_size = 6;
    data = {
        default = "{ 60, 20, 20, 20, 20, 20 }";
    };
};

prop = {
    name = "config_toolbar_style";
    desc = "Configures the appearance of the toolbar";
    type = multichoice;
    data = {
        default = 4;
    };
    choice = {
        name = "Icons";
        value = 1;
    };
    choice = {
        name = "Text";
        value = 2;
    };
    choice = {
        name = "Both (vertical)";
        value = 3;
    };
    choice = {
        name = "Both (horizontal)";
        value = 4;
    };
};

